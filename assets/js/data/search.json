[ { "title": "开箱 GitLab Flow Release 分支", "url": "/posts/change-the-git-branch-model-of-the-project/", "categories": "Tech, Git", "tags": "gitlab flow, git branching model", "date": "2021-02-01 17:47:00 +0800", "snippet": "Chirpy 项目从 v3.0.0 版开始，转型成了一个 Gembased 主题：支持在 RubyGems 上对外发布 gem 包，方便用户端升级。项目已有的分支模型使用 GitLab flow 的持续发布型方案，采用 master 和 production 双子星分支，而今对 Gem 版本跟踪开始力不从心，所以我计划将其转换成面向版本发的分支模型。GitLab flow release 分支GitLab flow 发布分支1核心思想是： master 分支开发成熟后，商定一个语义化版本号，如果是新的 minor 版本，就从 master 分支派生一个新的 release 分支..." }, { "title": "Docker 运行 Shadowsocks", "url": "/posts/steup-shadowsocks-with-docker/", "categories": "Tech, Shadowsocks", "tags": "shadowsocks, docker", "date": "2020-07-01 16:42:00 +0800", "snippet": "在更换一台新的梯子型 VPS 时，需要快速搭建 Shadowsocks，在运行 Linux 的 VPS 上采用 Docker 镜像安装将是个十分便捷的选择：无须考虑各种软件依赖对机器环境的污染（ Linux 跑服务不用 Docker 就是原罪）。虽然搭梯子频率很低，但在实施的时候，须翻阅好几个网站看文档，略烦。所以本文将略微讲述采用 Docker 搭建 Shadowsocks Server 的过程。安装 Docker Engine因为是裸机，所以安装 Docker Engine 是不能偷懒的，参考 Docker 官方文档 完成安装。出于本人的个人需要，下面将摘录在 Ubuntu Serv..." }, { "title": "对开源的一些体会", "url": "/posts/thoughts-on-open-source/", "categories": "Tech, Mix", "tags": "thoughts, story", "date": "2020-04-04 22:04:00 +0800", "snippet": "2020 年首文，四五个月没写过新文章，再不出一篇，博客都快要长草了。恰逢昨天 Chirpy 项目刚好拿到了第 100 个 star，所以踩点回忆一下将博客项目开源的初衷、过程中的体会以及对未来的一些想法。开源的初衷所有的故事的开始，都会出现一个不可逃避的问题，当时我面临的问题是，找不到自己想要的博客模版。另外，对前端技术觊觎已久却没有机会去接触实践，所以就从 2017 年末开始新建一个 Jekyll 项目，全新开发自己的博客。从第一行代码开始，博客项目在 GitHub 上一直保持开源的状态，原因有两个： 在 2019 年 1 月 之前，白嫖党不能把项目设置为私有。 白嫖党不能对私有..." }, { "title": "MacBook 合盖自动关闭蓝牙", "url": "/posts/turn-off-bluetooth-when-macbook-sleeps/", "categories": "Tech, Mac", "tags": "blueutil, sleepwatcher, homebrew, macos", "date": "2019-11-08 13:31:00 +0800", "snippet": "用过 MacBook 系列产品的童鞋应该都会发现，在合盖之后，蓝牙进程还是在后台处于开启状态。这对于限制链接数的蓝牙设备就会造成名额占位。例如，本人手上的某款蓝牙耳机，限制最多接入两个音源设备，MacBook 上用蓝牙耳机听着音乐，同时平板也保持和耳机的链接，几分钟后完成手上工作，合盖 Mac 潇洒离座，然后手插裤兜掏出手机想用蓝牙耳机听歌，这时耳机链接名额已经给平板和 Mac 占满了，无法再接纳手机。因此就不得不灰溜溜地归位，手动关闭平板或者 Mac 对耳机的链接。耗电与否先不讨论，蓝牙耳机的使用体验上已经大打折扣了。如果可以改变 MacBook 的习性，让它合盖之后自动关闭蓝牙，就不..." }, { "title": "GitHub Pages 的暗礁", "url": "/posts/solving-gh-pages-is-not-built-automatically/", "categories": "Tech, Website", "tags": "github pages, github api", "date": "2019-08-13 12:04:00 +0800", "snippet": "距离博客的框架设计分离出来成为一个独立项目，已经过去一段时间了，所以想把框架项目变成更加纯粹的 Jekyll Theme，项目名称也改为了 Chirpy，为项目部署一个新的 Demo 站点也是水到渠成的事。那么主题项目 Chirpy（也就是博客的架构）的 Travis-CI 流程要在原来础上增加一个步骤：部署到 Chirpy 的 Demo 站点。合并下来，Chirpy 线上 CI 的工作流就变成： 部署主题 Demo 部署个人博客GitHub Pages 掉链子本来一切看起来十分清晰流畅，然而 GitHub Pages 却不甘心让部署变得如此平凡。在一个 Travis-CI buil..." }, { "title": "Homebrew 替换国内源", "url": "/posts/replace-cn-mirror-for-homebrew/", "categories": "Tech, Mac", "tags": "macos, homebrew", "date": "2019-07-11 16:48:00 +0800", "snippet": "Homebrew 默认 GitHub 源的拉取速度慢得令人发指，以至于知乎出现了一个令人鼻酸的回答：为了对抗不公，必须使用国内镜像加速 Homebrew 的速度。中科大和清华两家的源做的很不错（此外还有 coding.net 的可选），下面介绍替换中科大的源。更换源代码仓库替换主仓库：$ git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git &amp;amp;&amp;amp; git pull origin master替换 homebrew-core 仓..." }, { "title": "macOS 使用 GNU 命令", "url": "/posts/use-gnu-utilities-in-mac/", "categories": "Tech, Mac", "tags": "macos, homebrew, gnu", "date": "2019-07-11 01:36:00 +0800", "snippet": "macOS 的自带命令行工具是 BSD 风格的，想在 Mac 上开发可以完美运行在 GNU/Linux 上的 Bash 脚本，必须依赖 Linux 服务器，或者本地 Linux VM / Docker 去测试脚本，甚是麻烦。如果替换 BSD 命令为 GNU 命令，把 Mac 当做 Linux 机器来用（不包括内核部分），将会意义非凡。安装 GNU 工具所需的 GNU 工具可通过 Homebrew 安装，常用工具的安装如下:$ brew install coreutils$ brew install findutils$ brew install gnu-sed$ brew install..." }, { "title": "TXT 制作 MOBI", "url": "/posts/convert-txt-to-mobi/", "categories": "Living, Kindle", "tags": "kindle", "date": "2019-05-09 21:44:00 +0800", "snippet": "概述本文将会介绍如何把 TXT 文件制作成为 Kindle 的 MOBI 文件。工具事先备好如下两项工具： 文本编辑器 Calibre 3.42.0其中文本编辑器选择自己熟悉的，并且支持正则表达式的产品。如 Sublime Text, Notepad++ 等。TXT 修订TXT 文件的段落章节使用 Markdown 语法添加目录，如原文：第 &amp;lt;一|二|...&amp;gt; 章修改为 Markdown 的 H2 标题：## 第 &amp;lt;一|二|...&amp;gt; 章由于手动修改费时费力，因此可以考虑用正则表达式完成。常用的正则表达式 搜..." }, { "title": "士力架的规格与差价", "url": "/posts/pricing-rules-for-snickers/", "categories": "Living, Discovery", "tags": "foods", "date": "2019-03-25 21:00:00 +0800", "snippet": "有时候，在屋子里难免会觉得饥饿难耐，就算点外卖，肚子也得咕噜叫个半个钟或更久。这时候，救火型的快速充饥食品就很重要了。在附近沃尔玛超市里面，买过各种各样的小包装糕点、奥利奥、沙琪玛之类的，还有好时醇黑巧克力，最后还是觉得，士力架比较耐饿，虽然很甜，吃的时候小口吃，配白开水送就没问题了。买了几次，发现超市货架上出售的士力架有几种不同的包装，而且性价比也各有不同。桶装纸盒装下面进行性价比分析： 净含量 价格 性价比 桶装 460g ¥ 29.80 15.44 g/¥ 纸盒..." }, { "title": "博客架构分拆", "url": "/posts/split-posts-n-metadata-of-blog/", "categories": "Tech, Website", "tags": "story, jekyll, travis ci, github", "date": "2019-01-14 22:01:00 +0800", "snippet": "令人瑟瑟发抖的寒冬中，时间迈入了 2019 年。一片萧条的大环境下，人们注定要为今后的生活付出更多艰辛与努力。微软，大洋彼岸的 IT 巨头，似乎觉察到这点，于是大手一挥送温暖：于今年 1 月 8 日宣告 GitHub 对个人开发者免费提供私密仓库服务，数量无限制。要知道，此前私密仓库是要每月耗费 7 刀巨资啊。收到这份新禧礼物后，我激动地把分散到各处小作坊平台的仓库统一迁移到 GitHub 上，逛 GitHub 的频率随之陡增。就是在这样的背景下，发现 GitHub 有人 Fork 我的博客仓库。像本站这种不走量不推广，且国内不备案的边缘博客，理论上没人关注的，于是好奇地进到那货的 Gi..." }, { "title": "Jekyll 集成 Travis CI", "url": "/posts/integrate-travis-ci-in-jekyll/", "categories": "Tech, Website", "tags": "travis ci, jekyll", "date": "2018-11-08 22:17:00 +0800", "snippet": "前段时间，因为本地 git push -f 覆盖远端 master 分支，导致博客在 GitHub Pages 上编译失败。查看 GitHub Help 的文档 “Viewing Jekyll build error messages”，文中提及可以通过第三方平台执行 build，直接观察错误信息细节，这才开始认识了本文主角：Travis CI。Travis CI 是个提供持续集成的服务平台，对 GitHub 开源项目免费，它可以自定义配置编译、测试到发布全套流程。如果只用来观察编译的日志，实在太浪费了。在此之前，本站项目推送到 GitHub 之前，都会先干两件事： 检查每篇文章的最后..." }, { "title": "Jekyll 的 SEO 优化", "url": "/posts/the-seo-to-jekyll/", "categories": "Tech, Website", "tags": "seo, robots, jekyll", "date": "2018-10-30 12:16:00 +0800", "snippet": "近来对博客主题、架构改进的热情明显高于写文章，略有本末倒置的意味。愧疚感驱使笔者写下最近为站点做的一些 SEO 优化： 爬虫保护 目录访问保护 permalink爬虫保护万维网上的站点，都会被搜索引擎爬虫抓取内容，以之作为搜索结果列表。搜索引擎会依据站点根目录的 robots.txt 所定义的规则，去抓取当前站点的内容。对于运行在 GitHub Pages 的站点，默认会生成一个文件 robots.txt，内容为：Sitemap: https://DOMAIN/sitemap.xml其中 DOMAIN 表示站点域名，指令定义 Sitemap 文件位置。为了指示爬虫 Bot 不去抓取..." }, { "title": "罗马复兴之游牧术", "url": "/posts/the-nomadic-tactics-of-aoe/", "categories": "Living, Game", "tags": "age of empires", "date": "2018-10-04 22:32:00 +0800", "snippet": "罗马复兴（帝国时代）的开图局，有一种战术非常灵活和致命，它就是游牧。释义何为游牧？其实就是和常规阵地战相反的战略思维，农民、建筑、兵马都能随着实时的战局需要随时移动。它对玩家的控兵能力有着极高的要求，宏观资源发展的动态思维也要具备，门槛高。特点及优势在进攻端，游牧能够做到敌明我暗，避实击虚，宛如匿藏在黑暗中的刺客，尖刀出其不意的刺入对手的咽喉。发展方面，游牧不需要考虑地形是否适合防御，因为专职发展的农民都游走四方，对方难以集中打击。此外还可以忽略初始资源的远近影响，由于没有阵地的概念，农民可以主动移到远处的果堆或者鹿、象等肉源，即便因为远出采肉而滞后升铜的时间线，也是可以接受的，因为通常..." }, { "title": "从 Google Analytics 获取 Pageviews", "url": "/posts/fetch-pageviews-from-google-analytics/", "categories": "Tech, Website", "tags": "google analytics, gae, nginx", "date": "2018-08-28 16:07:00 +0800", "snippet": "人的欲望总是不断膨胀的，笔者是凡人，也难逃此劫。近来，它滋生成为对博客功能的一个新需求：获取 GA (Google Analytic) 的 Pageviews。本站开建早期，就嵌入了 GA 的数据收集代码。它的功能仅限搜集跟踪记录并上传，没法同时返回统计信息。于是调研 Google 相关开发手册，得知 GA 中一个称为 Reporting 的组件，内含几个 API 对外提供处理后的数据，其中 Core Reporting API 支持按特定的维度、指标查询记录。所以使用这部分 API 就能得到所需要的 Pageviews 了。根据 Core Reporting API 的教程。通过 JS..." }, { "title": "Jekyll 网站性能优化", "url": "/posts/jekyll-site-performance-optimization/", "categories": "Tech, Website", "tags": "jekyll, css, js, html", "date": "2018-08-19 20:22:00 +0800", "snippet": "近来，突然觉博客项目的 CSS 内容越来越多，多次在 HTML 与 CSS 之间增减内容，就会增加残留无效 CSS 的概率，人工筛除颇为费神。经过查找资料，发现 Chrome 的 DevTools 自带的 Coverage 功能可以很好的解决这个问题。好奇心驱使下，自然想着寻找更多玩法，能不能借助 DevTools 提高网站性能呢？答案是肯定的。Lighthouse 是 Chrome 的性能审查扩展程序，位置在 DevTools 的 Audits 选项栏。根据自动化审查结果，可以知道网站性能短板所在，再由报告提供的建议去优化缺陷。Lighthouse 审查Audits 有五项审查内容，分..." }, { "title": "KcpTun 加速 Shadowsocks", "url": "/posts/speed-up-shadowsocks-by-kcptunp/", "categories": "Tech, Shadowsocks", "tags": "kcptun, kcp, shadowsocks, ec2, aws", "date": "2018-08-15 14:18:00 +0800", "snippet": "KCP 是一个快速可靠的 ARQ 协议，通过将 TCP 流量分拆到 UDP 传输，以增加流量的代价去获得低延时，从而大幅提高科学上网的流畅度。KCPTun 是 GO 实现 KCP 协议的工具，由服务端和客户端两部分组成，借助它作远程端口转发可以大幅提高 Shadowsocks（下简称 SS）的速度。总体概述笔者手上有一个 AWS 上运行的 EC2 实例，系统为 RHEL 7.4，上面跑着一个 ss-server 端的 daemon 进程。为了把 SS 流量通过 KcpTun 隧道转发，需要在 EC2 上安装 KcpTun-Server，客户端目标机安装 KcpTun-Client。Sha..." }, { "title": "GitHub &amp; Coding 双线开启 HTTPS", "url": "/posts/enable-https-on-githubpages-and-codingpages/", "categories": "Tech, Website", "tags": "nginx, dnspod, https, ssl, tls", "date": "2018-07-01 21:34:00 +0800", "snippet": "早前借助 DNSPod，GitHub Pages 和 Coding Pages，实现了 Jekyll 博客的国内外双线部署。但没有用上 SSL/TLS，浏览器地址栏上缺失的小锁，一直是心中的遗憾。用上 HTTPS 的好处不用多言，谷歌搜索结果优先排列，国内移动上网不会给无耻运营商插入广告。所以，本文将在此前基础上，叙述如何双线启用 HTTPS。 调研双线 SSL 的时候，GitHub Pages 还不允许自定义域名开启 HTTPS，所以本文使用 VPS 反向代理的方式解决此问题。 2018 年 5 月 1 日起，GitHub 官方已经开启自定义域名 HTTPS 支持(见官方公告)。前..." }, { "title": "Nginx 反向代理 Apache SSL", "url": "/posts/nginx-reverse-proxy-apache-ssl/", "categories": "Tech, Website", "tags": "nginx, apache, rhel", "date": "2018-06-29 17:46:00 +0800", "snippet": "笔者的 VPS 上运行了一个 Apache 的 PHP 服务，采用 HTTP 协议。现在打算为这个服务升级为 HTTPS，所以借用了 Nginx 反向代理实现目标。环境 RHEL 7.4 Apache 2.4 Nginx 1.10.1前提 安装 Apache Web Server，若没安装则参考安装指南。 安装 Nginx（开启 SSL 模块）。 注：如果之前为 Apache Web Server 配置过 SSL，则需要通过移除 mod_ssl 的方式关闭 Apache 的 SSL 功能： $ sudo yum -y remove mod_ssl Apache 更改默认端..." }, { "title": "Shadowsocks Server 配置", "url": "/posts/ssserver-config/", "categories": "Tech, Shadowsocks", "tags": "shadowsocks", "date": "2018-06-25 14:18:00 +0800", "snippet": "配置服务端采用 JSON 文件存储配置信息，可分单用户和多用户两种情况：单用户{ &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_port&quot;: 10000, &quot;password&quot;: &quot;mypasswd&quot;, &quot;timeout&quot;: 300, &quot;method&quot;: &quot;aes-256-cfb&quot;}多用户{ &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;port_passw..." }, { "title": "KC2 修改有目录的 MOBI", "url": "/posts/kc2-modify-mobi/", "categories": "Living, Kindle", "tags": "mobi, kc2", "date": "2018-05-07 20:29:00 +0800", "snippet": "缘由vol.moe 上下载的《灌篮高手》，里面很多跨页内容被分到两页。正确处理应该跨页合并成一页，替代掉原来的两页。另外，有些页扫描不准，把邻页的边缘都截进来了。这两种情况，都可通过 KC2 ( Kindle Comic Creator )把 PS 处理后的页替代原来的内容。几天后在 iPad 上看漫画，发现第一次处理时漏了一些未处理的瑕疵页。遂再补充完成，不过 KC2 编辑有目录的 EPUB 3 资源，会出现一些超链接错误，需要额外解决。本文就是解决 KC2 二次构建 EPUB 3 错误的一个案例。错误出现首先用 KindleUnpack 解压 MOBI 为 EPUB 3 格式，在 m..." }, { "title": "罗马复兴攻略", "url": "/posts/strategy-for-aoe/", "categories": "Living, Game", "tags": "age of empires", "date": "2018-03-16 22:19:00 +0800", "snippet": "罗马复兴（帝国时代）是微软在 1999 年发行的一款经典即时战略游戏。第一次接触是在 2001 年左右。 玩了十七年，至今依然十分喜爱，多次在 安装→删除→再安装 之间往复循环。记录一下攻略，供日后有空再重玩时，快速恢复竞技水平。 注：以下战略均针对明图丘陵地形，非全科技图，民族殷商。快捷键农民 组合键 功能说明 B+E 建住房 B+G 建谷仓 B+S 建仓库 B+F 建农田 B..." }, { "title": "GitHub &amp; Coding 双线部署 Jekyll 博客", "url": "/posts/dual-deployment-Jekyll-Blog-on-GithubPages-n-CodingPages/", "categories": "Tech, Website", "tags": "jekyll, github pages, coding pages, dnspod", "date": "2018-03-15 11:53:00 +0800", "snippet": "自从 Jekyll 博客放在 GitHub Pages，代码和服务托管都省了。可是国内访问速度一直要死不活的，ping 速一直在 140 ms 上下，运气好碰上流量空闲时段，偶尔会回落到 80 ms 等级，当然，只是偶尔。经过实施了优化源码、静态资源从国外 CDN 拷贝到项目本地的方法去提速，平时打开博客主页，一般肉眼测速，还是要 2s - 3s 附近，加载项延时一直卡在 GitHub 上。难道打开自己的博客都要挂 VPN 提速？这不是我想要的生活啊，于是上万能的 Internet 寻求解决方案。不出片刻，发现了一条光明大道：Coding Pages，另外还有个意外收获 DNSPod。简..." }, { "title": "macOS 环境快捷键", "url": "/posts/shortcut-on-macos/", "categories": "Tech, Mac", "tags": "macos, chrome, sublime, intellij, idea", "date": "2018-03-07 15:46:00 +0800", "snippet": "在 macOS 中，有些组合快捷键很实用，但是容易忘记。故记下，省去日后 Google 的流量费，早餐加个蛋。为了精简描述，本文为以下按键采用缩写：⌘→command→cmd⌃→control→ctrl 缩写绝对不是偷懒不想码多几个字母。macOS 用途 快捷键 固定/隐藏 Docker alt+cmd+D 熄灭屏幕 shift+ctrl+power 截取全屏 shift+cmd+3 截取选择区域 shi..." }, { "title": "Jekyll 代码块展示", "url": "/posts/jekyll-code-snippet/", "categories": "Tech, Website", "tags": "jekyll", "date": "2018-02-26 21:18:00 +0800", "snippet": "展示代码高亮是每个技术博客与生俱来的使命，而展示行号，也是一个不可或缺的需求。对 Jekyll 用户的好消息是，官方对此提供了友好的支持。语法高亮常规的 Markdown 语法：使用 ``` 或者 ~~~ 符号可以展示语法高亮代码块。另外，也可以使用 Jekyll 的 highlight tag，例如，展示一段 HTML 代码：{% highlight html %}&amp;lt;p&amp;gt;This is some text in a paragraph.&amp;lt;/p&amp;gt;{% endhighlight %}显示行号有两种方式可以选择：1. 使用 Kramdo..." }, { "title": "Jekyll 的 Categories 设计", "url": "/posts/jekyll-categroies-design/", "categories": "Tech, Website", "tags": "jekyll", "date": "2018-02-25 16:29:00 +0800", "snippet": "当博客开发进行到 Category 部分时，很多头疼的问题接踵而来： 类目如何分层，分多少层？ 顶级分类能不能允许文章与子分类同存？ 如何实现方便快捷的交互 UI？思考的过程中仔细参阅了 Jekyll Docs，还有 Google 上一些关于 WordPress 的分类规则文章，以及 Evernote 的产品设计，最后做出以下设计。设计目标 出于归类精简的初衷，类目最多分两级。 一级分类下，既可展示子分类，也有入口可直接展示所有文章。 博客顶栏 Categories 模块展示所有顶级分类及其各自的子类（文章列表隐藏）。交互点击分类名称进入新页面，展示所有该分类下的文章列表。一..." }, { "title": "建站简史", "url": "/posts/story-of-this-site/", "categories": "Tech, Website", "tags": "story", "date": "2018-02-24 22:19:00 +0800", "snippet": "自 2016 年起，国内博客平台的相继要求绑定手机或收费，且时不时出现泄漏、售卖用户信息的恶性事件。为了减少日后接到诈骗骚扰电话的次数，我决心逃离这个丑态百出的圈子。往后的时间，对技术或生活中很多问题的解决方案，都是草草记录在 Evernote 上。毕竟 Evernote 是个专注笔记的平台，无法实现博客的那种自由度，因此搭建私人博客的需求显得尤为迫切。回顾过去，多年前曾试玩过极其流行的 WordPress。体验一番后，感觉它过于复杂臃肿、吃硬件，在美区的 VPS 上跑过几个月，一篇文章都没写，最后随着 VPS 到期而销声匿迹了。2017 年无意中发现了 GitHub Pages 和 J..." }, { "title": "为漫画 MOBI 添加目录", "url": "/posts/override-kindle-comic-mobi/", "categories": "Living, Kindle", "tags": "mobi, kc2", "date": "2017-10-17 22:33:05 +0800", "snippet": "总体思路 使用 KindleUnpack1把 mobi 文件解压分割。 使用 Kindle Comic Creator2(下简称KC2)打开 mobi8/OEBPS/content.opf 重制（可加目录），保存为 KF8 的 mobi 文件。因为 KC2 的输出为双模的 mobi，即里面既有 mobi 也有 azw3，所以体积为源文件的2倍或更多，故需再分解。 使用 KindleStrip3 把 2 步骤的输出文件去除冗余即可获得目标 mobi。具体执行实例 Kindle Comic Creator 制作目录部分略麻烦，再次需要具体阐述。 PS：以下实例运行平台为 Windo..." } ]
